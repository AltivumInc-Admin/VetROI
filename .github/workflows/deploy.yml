name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
        - dev
        - staging
        - prod

permissions:
  id-token: write
  contents: read

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'prod' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install SAM CLI
      run: pip install aws-sam-cli
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
        aws-region: us-east-1
    
    - name: Build SAM application
      run: |
        sam build --template sam-templates/template.yaml
    
    - name: Deploy SAM application
      run: |
        sam deploy \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --stack-name vetroi-${{ github.event.inputs.environment || 'prod' }} \
          --s3-bucket ${{ secrets.SAM_ARTIFACTS_BUCKET }} \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides \
            BedrockModelId=${{ secrets.BEDROCK_MODEL_ID }} \
            ONetApiUrl=${{ secrets.ONET_API_URL }}
    
    - name: Get API Gateway URL
      id: api-url
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name vetroi-${{ github.event.inputs.environment || 'prod' }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
          --output text)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
    
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    environment: ${{ github.event.inputs.environment || 'prod' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      env:
        VITE_API_URL: ${{ needs.deploy-backend.outputs.api_url }}
      run: |
        cd frontend
        npm run build
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
        aws-region: us-east-1
    
    - name: Deploy to S3
      run: |
        aws s3 sync frontend/dist/ s3://${{ secrets.FRONTEND_BUCKET }}/ \
          --delete \
          --cache-control "public, max-age=31536000" \
          --exclude "index.html" \
          --exclude "*.json"
        
        aws s3 cp frontend/dist/index.html s3://${{ secrets.FRONTEND_BUCKET }}/ \
          --cache-control "public, max-age=0, must-revalidate"
        
        aws s3 cp frontend/dist/ s3://${{ secrets.FRONTEND_BUCKET }}/ \
          --recursive \
          --exclude "*" \
          --include "*.json" \
          --cache-control "public, max-age=0, must-revalidate"
    
    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"