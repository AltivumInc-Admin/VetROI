AWSTemplateFormatVersion: '2010-09-09'
Description: 'VetROI Phase 3.1 - API Gateway Configuration'

Parameters:
  Environment:
    Type: String
    Default: test
    AllowedValues:
      - test
      - production
    Description: Deployment environment
    
  LambdaStackName:
    Type: String
    Default: vetroi-lambda-test
    Description: Name of the CloudFormation stack containing Lambda functions

Resources:
  # HTTP API (v2)
  VetROIHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'VetROI-API-${Environment}'
      Description: VetROI HTTP API managed by CloudFormation
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowHeaders:
          - Content-Type
          - Authorization
          - X-Requested-With
          - X-Api-Key
        MaxAge: 86400
      Tags:
        Application: VetROI
        Environment: !Ref Environment
        ManagedBy: CloudFormation

  # Stage
  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref VetROIHttpApi
      StageName: !Ref Environment
      AutoDeploy: true
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        ThrottlingBurstLimit: 100
        ThrottlingRateLimit: 50
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","routeKey":"$context.routeKey","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength","error":"$context.error.message","integrationError":"$context.integration.error"}'
      Tags:
        Application: VetROI
        Environment: !Ref Environment

  # CloudWatch Log Group for API
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/VetROI-${Environment}'
      RetentionInDays: 30

  # Lambda Integrations
  RecommendIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref VetROIHttpApi
      Description: Integration with VetROI Recommend Lambda
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 
        - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
        - LambdaArn: !ImportValue
            Fn::Sub: '${LambdaStackName}-RecommendFunctionArn'
      PayloadFormatVersion: '2.0'
      TimeoutInMilliseconds: 29000

  # Routes
  RecommendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref VetROIHttpApi
      RouteKey: 'POST /recommend'
      Target: !Sub 'integrations/${RecommendIntegration}'
      AuthorizationType: NONE

  CareerDetailRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref VetROIHttpApi
      RouteKey: 'GET /career/{socCode}'
      Target: !Sub 'integrations/${RecommendIntegration}'
      AuthorizationType: NONE

  # Lambda Permissions
  RecommendLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !ImportValue
        Fn::Sub: '${LambdaStackName}-RecommendFunctionArn'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${VetROIHttpApi}/*/*'

  # DD214 Routes (placeholder integrations for now)
  DD214UploadRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref VetROIHttpApi
      RouteKey: 'POST /dd214/upload'
      Target: !Sub 'integrations/${RecommendIntegration}'  # Temporary
      AuthorizationType: NONE

  DD214StatusRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref VetROIHttpApi
      RouteKey: 'GET /dd214/status'
      Target: !Sub 'integrations/${RecommendIntegration}'  # Temporary
      AuthorizationType: NONE

  DD214InsightsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref VetROIHttpApi
      RouteKey: 'GET /dd214/insights'
      Target: !Sub 'integrations/${RecommendIntegration}'  # Temporary
      AuthorizationType: NONE

  DD214RedactedRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref VetROIHttpApi
      RouteKey: 'GET /dd214/redacted'
      Target: !Sub 'integrations/${RecommendIntegration}'  # Temporary
      AuthorizationType: NONE

  SentraConversationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref VetROIHttpApi
      RouteKey: 'POST /sentra/conversation'
      Target: !Sub 'integrations/${RecommendIntegration}'  # Temporary
      AuthorizationType: NONE

  # OPTIONS routes for CORS
  RecommendOptionsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref VetROIHttpApi
      RouteKey: 'OPTIONS /recommend'
      Target: !Sub 'integrations/${RecommendIntegration}'
      AuthorizationType: NONE

  CareerOptionsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref VetROIHttpApi
      RouteKey: 'OPTIONS /career/{socCode}'
      Target: !Sub 'integrations/${RecommendIntegration}'
      AuthorizationType: NONE

Outputs:
  ApiEndpoint:
    Description: HTTP API endpoint URL
    Value: !Sub 'https://${VetROIHttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  ApiId:
    Description: HTTP API ID
    Value: !Ref VetROIHttpApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiId'

  TestCommand:
    Description: Command to test the API
    Value: !Sub |
      curl -X POST https://${VetROIHttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/recommend \
        -H "Content-Type: application/json" \
        -d '{"branch":"army","code":"11B","homeState":"TX","relocate":false,"education":"bachelor"}'